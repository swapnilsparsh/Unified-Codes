#include <iostream>
#include <vector>
#include <climits>
using namespace std;
 
// Function to calculate the maximum sum in a given array
// with no adjacent elements considered
// `i` ——> index of the current element
// `prev` ——> index of the previous element included in the sum
int findMaxSumSubsequence(vector<int> const &nums, int i, int n, int prev)
{
    // base case: all elements are processed
    if (i == n) {
        return 0;
    }
 
    // recur by excluding the current element
    int excl = findMaxSumSubsequence(nums, i + 1, n, prev);
 
    int incl = 0;
 
    // include current element only if it's not adjacent to
    // the previous element
    if (prev + 1 != i) {
        incl = findMaxSumSubsequence(nums, i + 1, n, i) + nums[i];
    }
 
    // return maximum sum we get by including or excluding
    // current item
    return max(incl, excl);
}
 
int main()
{
    vector<int> nums = { 1, 2, 9, 4, 5, 0, 4, 11, 6 };
    int n = nums.size();
 
    cout << "The maximum sum is " << findMaxSumSubsequence(nums, 0, n, INT_MIN);
 
    return 0;
}



